package FarmSupplyChain;

import org.hyperledger.fabric.contract.Context;
import org.hyperledger.fabric.contract.ContractInterface;
import org.hyperledger.fabric.contract.annotation.Contract;
import org.hyperledger.fabric.contract.annotation.Default;
import org.hyperledger.fabric.contract.annotation.Info;
import org.hyperledger.fabric.contract.annotation.Transaction;
import org.hyperledger.fabric.shim.ChaincodeException;
import org.hyperledger.fabric.shim.ChaincodeStub;
import com.owlike.genson.Genson;

@Contract(
    name = "FarmSupplyChain",
    info = @Info(
        title = "FarmSupplyChain",
        description = "A Sample Product transfer chaincode example",
        version = "0.0.1-SNAPSHOT"
    )
)
@Default
public final class FarmTransfer implements ContractInterface {

    private final Genson genson = new Genson();
    private enum FarmSupplyChainErrors {
        FARM_NOT_FOUND,
        FARM_ALREADY_EXISTS
    }

    @Transaction()
    public void initLedger(final Context ctx) {
        ChaincodeStub stub = ctx.getStub();
        
        Farm farm = new Farm(
            "1",
            "Mango",
            "MahirFPO",
            "Kurnool",
            "2023-05-10",
            "FruitDealer",
            "Amravati",
            "2023-05-19",
            "Safal",
            "NewDelhi",
            "2023-05-21"
        );
        
        String farmState = genson.serialize(farm);
        
        stub.putStringState("1", farmState);
    }

    @Transaction()
    public Farm addNewFarm(final Context ctx, final String productId, final String productDescription, final String producerName, final String producerAddress, final String harvestDate) {
        ChaincodeStub stub = ctx.getStub();
        String farmState = stub.getStringState(productId);
        
        if (!farmState.isEmpty()) {
            String errorMessage = String.format("Farm %s already exists", productId);
            throw new ChaincodeException(errorMessage, FarmSupplyChainErrors.FARM_ALREADY_EXISTS.toString());
        }
        
        Farm farm = new Farm(productId, productDescription, producerName, producerAddress, harvestDate, "", "", "", "", "", "");
        
        farmState = genson.serialize(farm);
        
        stub.putStringState(productId, farmState); 
        
        return farm;
    }

    @Transaction()
    public Farm queryFarmByProductId(final Context ctx, final String productId) {
        ChaincodeStub stub = ctx.getStub();
        String farmState = stub.getStringState(productId);

        if (farmState.isEmpty()) {
            String errorMessage = String.format("Farm %s does not exist", productId);
            throw new ChaincodeException(errorMessage, FarmSupplyChainErrors.FARM_NOT_FOUND.toString());
        }
        
        Farm farm = genson.deserialize(farmState, Farm.class);
        return farm;
    }

    @Transaction()
    public Farm changeProductOwnership(final Context ctx, final String productId, final String distributorName, final String distributorAddress, final String prodToDistDate) {
        ChaincodeStub stub = ctx.getStub();
        String farmState = stub.getStringState(productId);

        if (farmState.isEmpty()) {
            String errorMessage = String.format("Farm %s does not exist", productId);
            throw new ChaincodeException(errorMessage, FarmSupplyChainErrors.FARM_NOT_FOUND.toString());
        }

        Farm farm = genson.deserialize(farmState, Farm.class);

        Farm newFarm = new Farm(
            farm.getProductId(),
            farm.getProductDescription(),
            farm.getProducerName(),
            farm.getProducerAddress(),
            farm.getHarvestDate(),
            distributorName,
            distributorAddress,
            prodToDistDate,
            "",
            "",
            ""
        );

        String newFarmState = genson.serialize(newFarm);

        stub.putStringState(productId, newFarmState);

        return newFarm;
    }

    @Transaction()
    public Farm transferProductDistributorToRetailer(final Context ctx, final String productId, final String retailerName, final String retailerAddress, final String distToRetaDate) {
        ChaincodeStub stub = ctx.getStub();
        String farmState = stub.getStringState(productId);

        if (farmState.isEmpty()) {
            String errorMessage = String.format("Farm %s does not exist", productId);
            throw new ChaincodeException(errorMessage, FarmSupplyChainErrors.FARM_NOT_FOUND.toString());
        }

        Farm farm = genson.deserialize(farmState, Farm.class);

        Farm newFarm = new Farm(
            farm.getProductId(),
            farm.getProductDescription(),
            farm.getProducerName(),
            farm.getProducerAddress(),
            farm.getHarvestDate(),
            farm.getDistributerName(),
            farm.getDistributerAddress(),
            farm.getProdToDistDate(),
            retailerName,
            retailerAddress,
            distToRetaDate
        );

        String newFarmState = genson.serialize(newFarm);

        stub.putStringState(productId, newFarmState);

        return newFarm;
    }
}
